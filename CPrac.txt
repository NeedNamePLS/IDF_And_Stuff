/////////////////////////////////////////////////////////////////////////////////////////////
// Test 1: For this task, you will receive a pointer to NULL terminated string: 
//		   The objective will be to fix any words incorrectly spelled words by replacing
//         every occurence of the letter 'y' with 's'.
//
// Expected Return Values:
//		- the task is successful: should return ERROR_SUCCESS (0).
//		- provided parameters are bad: should return ERROR_INVALID_PARAMETER (87)
//		- the letter 'y' is not part of 'sentence': should return ERROR_NOT_FOUND (1168)
/////////////////////////////////////////////////////////////////////////////////////////////
int changeLetterInString(char *sentence)
{
	int counter = 0;

	if (!sentence)
	{
		return ERROR_INVALID_PARAMETER;
	}
	else
	{
		for (int i = 0; i < strlen(sentence); i++)
		{
			if (sentence[i] == 121)
			{
				counter++;
			}
		}
		if (counter > 0)
		{
			for (int i = 0; i < strlen(sentence); i++)
			{
				if (sentence[i] == 121)
				{
					sentence[i] = 115;
				}
			}
			return ERROR_SUCCESS;
		}
		else
		{
			return ERROR_NOT_FOUND;
		}
	}
}
/////////////////////////////////////////////////////////////////////////////////////////////
// Test 2: For this task, you will receive a pointer to NULL terminated string: 
//		   The objective will be to fix the sentence by reversing every occurence of
//         "drow" with "word"
//
// Expected Return Values:
//		- the task is successful: should return ERROR_SUCCESS (0).
//		- provided parameters are bad: should return ERROR_INVALID_PARAMETER (87)
//		- the word "drow" is not part of 'sentence': should return ERROR_NOT_FOUND (1168)
/////////////////////////////////////////////////////////////////////////////////////////////
int reverseWord(char *sentence)
{
	if (!sentence)
	{
		return ERROR_INVALID_PARAMETER;
	}

	int counter = 0;

	for (int i = 0; sentence[i] != '\0'; i++)
	{
		if (sentence[i] == 'd' && sentence[i+1] == 'r' && sentence[i+2] == 'o' && sentence[i+3] == 'w')
		{
			sentence[i] = 'w';
			sentence[i+1] = 'o';
			sentence[i+2] = 'r';
			sentence[i+3] = 'd';
			counter++;
		}
	}
	if (counter == 0)
	{
		return ERROR_NOT_FOUND;
	}
	else
	{
		return ERROR_SUCCESS;
	}
}
/////////////////////////////////////////////////////////////////////////////////////////////
// Test 3: For this task, you will receive a pointer to NULL terminated string: 
//		   The objective will be to obfuscate the sentence by "ZORing" (XORing) each byte with the
//         given key
//
// Expected Return Values:
//		- the task is successful: should return ERROR_SUCCESS (0).
//		- provided parameters are bad: should return ERROR_INVALID_PARAMETER (87)
/////////////////////////////////////////////////////////////////////////////////////////////
int obfuscateString(char *sentence, char key)
{
	if (!sentence || !key)
	{
		return ERROR_INVALID_PARAMETER;
	}

	for (int i = 0; i < strlen(sentence); i++)
	{
		sentence[i] = sentence[i] ^ key;
	}

	return ERROR_SUCCESS;
}
/////////////////////////////////////////////////////////////////////////////////////////////
// Test 4: For this task, you will receive a pointer to NULL terminated string: 
//		   The objective will be to concatenate sentence1 and sentence2
//         sentence1 will hold the concatenated strings
//
// Expected Return Values:
//		- the task is successful: should return ERROR_SUCCESS (0).
//		- provided parameters are bad: should return ERROR_INVALID_PARAMETER (87)
/////////////////////////////////////////////////////////////////////////////////////////////
int combineStrings(char *sentence1, int sentence1Length, char *sentence2, int sentence2Length, int bufferSize)
{
	if (!sentence1 || !sentence1Length || !sentence2 || !sentence2Length || !bufferSize)
	{
		return ERROR_INVALID_PARAMETER;
	}
	else
	{
		char *temp = malloc(sentence1Length + sentence2Length + 1);
		strcpy(temp, sentence1);
		strcat(temp, sentence2);
		strcpy(sentence1, temp);

		return ERROR_SUCCESS;
	}

}
/////////////////////////////////////////////////////////////////////////////////////////////
// Test 5: For this task, you will receive a pointer to NULL terminated string: 
//		   The objective will be to insert the missing word into the sentence.
//         "O'er the land of the <insert> and the home of the brave."
//			The word "free" is missing and needs to be inserted
//
// Expected Return Values:
//		- the task is successful: should return ERROR_SUCCESS (0).
//		- provided parameters are bad: should return ERROR_INVALID_PARAMETER (87)
/////////////////////////////////////////////////////////////////////////////////////////////
int insertWord(char *sentence, int sentenceLength, char *word, int wordLength, int loc)
{
	if (!sentence || !sentenceLength || !word || !wordLength || !loc)
	{
		return ERROR_INVALID_PARAMETER;
	}
	else
	{
		//word = " free";
		char *temp = malloc(sentenceLength + wordLength + 1);
		strncpy(temp, sentence, loc + 1);
		temp[loc] = '\0';
		strcat(temp, word);
		strcat(temp, sentence + loc + 1);
		strcpy(sentence, temp);
		printf("%s\n", sentence);

		return ERROR_SUCCESS;
	}
}